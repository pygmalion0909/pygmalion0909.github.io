{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/Overloading/","result":{"data":{"site":{"siteMetadata":{"title":"SuperPil","author":"Kyeong Pil","siteUrl":"https://pygmalion0909.github.io","comment":{"disqusShortName":"","utterances":"pygmalion0909/blog-comment"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"aafdb34c-ed91-51d8-884a-f0703caa4a22","excerpt":"Overload의 사전적 의미는 “초과 적재”, “과부하”이다. 전혀 느낌이 오지 않는다. 무엇을 쌓는다는 건가?! \nOverloading을 한마디로 정의하자면! 할 수 없다. 어휘력 부족…😿 \n그러니까. 그. 뭐냐. Um… Java에 class가 있다. \nclass에 메소드를 만드는데 메소드 이름을 중복으로 여러 개 만든다. 원래 메소드 이름이 중복되면 에러가 발생하지만 약간의 규칙을 준수하여 만들면 에러가 발생하지 않고 만들 수 있다. 이것을 Overloading…","html":"<p>Overload의 사전적 의미는 “초과 적재”, “과부하”이다.<br>\n전혀 느낌이 오지 않는다. 무엇을 쌓는다는 건가?!<br>\n<br>\nOverloading을 한마디로 정의하자면!<br>\n할 수 없다. 어휘력 부족…😿<br>\n<br>\n그러니까. 그. 뭐냐. Um… Java에 class가 있다.\nclass에 메소드를 만드는데 메소드 이름을 중복으로 여러 개 만든다.<br>\n원래 메소드 이름이 중복되면 에러가 발생하지만 약간의 규칙을 준수하여 만들면 에러가 발생하지 않고 만들 수 있다. 이것을 Overloading이라 한다.<br>\n<br>\n여기서 의문이 든다.<br>\n왜 같은 이름의 메소드를 굳이! 여러 개 만들까?!</p>\n<h2 id=\"overloading-예제\" style=\"position:relative;\"><a href=\"#overloading-%EC%98%88%EC%A0%9C\" aria-label=\"overloading 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overloading 예제</h2>\n<p>Overloading에는 메소드 Overloading, 생성자 Overloading 2가지가 있다.<br>\n먼제 메소드 Overloading부터 보자.</p>\n<h3 id=\"메소드-overloading\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-overloading\" aria-label=\"메소드 overloading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 Overloading</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Overloading</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">OverloadingMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">OverloadingMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">UseMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">int</span> resultA <span class=\"token operator\">=</span> <span class=\"token class-name\">OverloadingMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> resultB <span class=\"token operator\">=</span> <span class=\"token class-name\">OverloadingMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> resultC <span class=\"token operator\">=</span> <span class=\"token class-name\">OverloadingMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">double</span> resultD <span class=\"token operator\">=</span> <span class=\"token class-name\">OverloadingMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===resultA===\"</span> <span class=\"token operator\">+</span> resultA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===resultB===\"</span> <span class=\"token operator\">+</span> resultB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//6</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===resultC===\"</span> <span class=\"token operator\">+</span> resultC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2.6</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===resultD===\"</span> <span class=\"token operator\">+</span> resultD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2.6</span>\n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>👉 public class Overloading { .. }</strong><br>\nOverloading class를 만들었다. class내부에 sum 하는 기능을 가진 메소드를 만들어 보자.<br>\n<br></p>\n<p><strong>👉 public int sumMethod(int a, int b) { .. }</strong><br>\n첫 번째 메소드는 int타입 a, b를 받아 덧셈하는 기능이다.<br>\n<br></p>\n<p><strong>👉 public int sumMethod(int a, int b, int c) { .. }</strong><br>\n두 번째 메소드는 int타입 3개를 받아 덧셈하는 기능이다.<br>\n<br></p>\n<p><strong>👉 public int sumMethod(int a, double b) { .. }</strong><br>\n세 번째 메소드는 int, double타입 각각 한 개씩 받아 덧셈하는 기능이다.<br>\n<br></p>\n<p><strong>👉 public int sumMethod(double a, int b) { .. }</strong><br>\n네 번째 메소드는 세 번째 메소드의 파라미터 순서만 바꿨다.<br>\n<br></p>\n<p><strong>👉 public void UseMethod() { .. }</strong><br>\n위에서 만든 3개의 메소드들의 호출하여 실제로 사용하는 메소드다.  </p>\n<p>위 코드를 살짝만! 봐도 4개의 메소드의 공통점과 차이점을 쉽게 파악할 수 있다.<br>\n공통점은 덧셈하는 기능이다.<br>\n차이점은 덧셈의 개수 또는 타입, 순서가 다르다.\n<br></p>\n<p>Overloading은 같은 기능을 가진 메소드들을 이름으로 분리하지 않고 파라미터 타입, 개수, 순서로 구분 지어 사용할 수 있게 한다. 만약, Overloading을 하지 않는다면 어떻게 될까?<br>\nOverloading을 하지 않을 경우 아래 코드와 같이 이름으로 구분 지어야 한다.<br>\nsumMethodTwoInt, sumMethodThreeInt, sumMethodString…<br>\n만약, 동일한 기능에 다른 타입의 메소드가 더 필요하다면?!  </p>\n<h3 id=\"생성자-overloading\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-overloading\" aria-label=\"생성자 overloading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 Overloading</h3>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#drop_the_text input</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #343a40<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>list.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 5px center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #2e3238<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>👉 <strong>background-image: url(list.png)</strong><br>\n배경 이미지로 아이콘 이미지를 넣는다.\n<br/>\n<br/></p>\n<p>👉 <strong>background-repeat: no-repeat</strong><br>\n이미지가 작아서 반복이 된다. no-repeat을 사용하여 반복 없이 이미지 한 개만 나오게 한다.\n<br/>\n<br/></p>\n<p>👉 <strong>background-position: 5px center</strong><br>\ninput영역 안에서 이미지를 원하는 위치를 정한다. 5px은 x축 위치 값, center은 y축 위치값\n단위는 px, %, top, center, left, right 가 있다.\n<br/>\n<br/></p>\n<p>👉 <strong>padding-left: 40px</strong><br>\npadding값이 없으면 HTML에서 설정한 placeholder=“Add List”와 겹쳐진다. 그래서 padding값을 줘서 겹침 현상을 없앤다. input을 클릭했을 때 padding값만큼\n<br/>\n<br/></p>\n<p>👉 <strong>box-sizing: border-box</strong><br>\ninputd에 width: 100% 가 있어서 box-sizing코드가 없으면 input의 넓이가 부모 넓이보다 넘는 현상이 발생한다.<br>\nbox-sizing: border-box을 사용하여 input 넓이를 부모 넓이와 같게 한다. input의 width를 부모보다 작게 줄 경우 box-sizi코드는 필요 없다.\n<br/>\n<br/></p>","frontmatter":{"title":"Overloading - 오버로딩","date":"April 25, 2021"}}},"pageContext":{"slug":"/Java/Overloading/","previous":{"fields":{"slug":"/Css/input에 아이콘 넣기/"},"frontmatter":{"title":"input에 아이콘 넣기","category":"Css","draft":false}},"next":null}},"staticQueryHashes":["3128451518","3609235153"]}